<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description>Scrollable tabs</description>
        <global>false</global>
        <ignore_in_now_experience>false</ignore_in_now_experience>
        <name>ui.tab.scroll.v2</name>
        <script><![CDATA[/*
 * angular-ui-tab-scroll
 * https://github.com/VersifitTechnologies/angular-ui-tab-scroll
 *
 * Version: 2.3.5
 * License: MIT
 */

angular.module('ui.tab.scroll.v2', [])
    .provider('scrollableTabsetConfigV2', function() {

        //the default options
        var defaultConfig = {
            showDropDown: true,
            showTooltips: true,
            tooltipLeftPlacement: 'right',
            tooltipRightPlacement: 'left',
            scrollBy: '200',
            autoRecalculate: false,
            leftScrollAddition: '0'
        };

        var config = angular.extend({}, defaultConfig);

        return {
            setShowDropDown: function(value) {
                config.showDropDown = (value == true);
            },
            setShowTooltips: function(value) {
                config.showTooltips = (value == true);
            },
            setTooltipLeftPlacement: function(value) {
                config.tooltipLeftPlacement = value;
            },
            setTooltipRightPlacement: function(value) {
                config.tooltipRightPlacement = value;
            },
            setScrollBy: function(value) {
                config.scrollBy = value;
            },
            setAutoRecalculate: function(value) {
                config.autoRecalculate = (value == true);
            },
            setLeftScrollAddition: function(value) {
                config.leftScrollAddition = value;
            },
            $get: function() {
                return {
                    showDropDown: config.showDropDown,
                    showTooltips: config.showTooltips,
                    tooltipLeftPlacement: config.tooltipLeftPlacement,
                    tooltipRightPlacement: config.tooltipRightPlacement,
                    scrollBy: config.scrollBy,
                    autoRecalculate: config.autoRecalculate,
                    leftScrollAddition: config.leftScrollAddition
                };
            }
        };
    })
    .directive('scrollableTabsetV2', [
        'scrollableTabsetConfigV2', '$window', '$interval', '$timeout', '$sce',
        function(scrollableTabsetConfigV2, $window, $interval, $timeout, $sce) {

            return {
                restrict: 'AE',
                transclude: true,

                scope: {
                    showDropDown: '@',
                    showTooltips: '@',
                    tooltipLeftPlacement: '@',
                    tooltipRightPlacement: '@',
                    scrollBy: '@',
                    autoRecalculate: '@',
                    isButtonsVisible: '=?',
                    tabsetClass: '@?',
                    dropDownClass: '@?',
                    dropDownMenuClass: '@?',
                    dropDownHeaderTemplateUrl: '@?',
                    dropDownHeaderClass: '@?',
                    api: '=?',
                    leftScrollAddition: '@'
                },

                template: [
                    '<div class="ui-tabs-scrollable {{tabsetClass}}" ng-class="{\'show-drop-down\': !hideDropDown}">',
                    '<button type="button" ng-mousedown="scrollButtonDown(\'left\', $event)" ng-mouseup="scrollButtonUp()" ng-hide="hideButtons"' +
                    ' ng-disabled="disableLeft" class="btn nav-button left-nav-button"' +
                    ' tooltip-placement="{{tooltipLeftDirection}}" uib-tooltip-html="tooltipLeftHtml"></button>',
                    '<div class="spacer" ng-class="{\'hidden-buttons\': hideButtons}" ng-transclude></div>',
                    '<button type="button" ng-mousedown="scrollButtonDown(\'right\', $event)" ng-mouseup="scrollButtonUp()" ng-hide="hideButtons"' +
                    ' ng-disabled="disableRight" class="btn nav-button right-nav-button"' +
                    ' tooltip-placement="{{tooltipRightDirection}}" uib-tooltip-html="tooltipRightHtml"></button>',
                    '<div class="btn-group" ng-class="::dropDownClass" uib-dropdown ng-hide="hideDropDown" ng-click="dropdownClick($event)">',
                    '<button type="button" class="btn" uib-dropdown-toggle></button>',
					'<ul class="dropdown-menu" uib-dropdown-menu role="menu" ng-class="::dropDownMenuClass||\'dropdown-menu-right\'" style="column-count: 2;">',
                    '<li ng-class="::dropDownHeaderClass" ng-include="::dropDownHeaderTemplateUrl"></li>',
                    '<li role="menuitem" ng-repeat="tab in dropdownTabs" ng-class="{\'disabled\': tab.disabled, \'active\': tab.active}" ng-click="activateTab(tab)">',
                    '<a href><span class="dropDownTabActiveMark" ng-style="{\'visibility\': tab.active?\'visible\':\'hidden\'}"></span><span ng-bind-html="tab.tabScrollTitle"</span></a>',
                    '</li>',
                    '</ul>',
                    '</div>',
                    '</div>'
                ].join(''),

                link: function($scope, $el) {
					
                    $scope.dropdownTabs = [];
                    $scope.hideButtons = true;
                    $scope.hideDropDown = true;
                    $scope.tooltipRightHtml = '';
                    $scope.tooltipLeftHtml = '';
                    $scope.disableLeft = true;
                    $scope.disableRight = true;
                    $scope.tooltipLeftDirection = $scope.tooltipLeftPlacement ? $scope.tooltipLeftPlacement : scrollableTabsetConfigV2.tooltipLeftPlacement;
                    $scope.tooltipRightDirection = $scope.tooltipRightPlacement ? $scope.tooltipRightPlacement : scrollableTabsetConfigV2.tooltipRightPlacement;
                    $scope.mouseDownInterval = null;
                    $scope.isHolding = false;
                    $scope.winResizeTimeout;
                    $scope.userShowDropDown = $scope.showDropDown ? $scope.showDropDown === 'true' : scrollableTabsetConfigV2.showDropDown;
                    $scope.userShowTooltips = $scope.showTooltips ? $scope.showTooltips === 'true' : scrollableTabsetConfigV2.showTooltips == true;
                    $scope.scrollByPixels = parseInt($scope.scrollBy ? $scope.scrollBy : scrollableTabsetConfigV2.scrollBy);
                    $scope.leftScrollAdditionPixels = parseInt($scope.leftScrollAddition ? $scope.leftScrollAddition : scrollableTabsetConfigV2.leftScrollAddition);

                    $scope.api = {
                        doRecalculate: function() {
                            $timeout(function() {
                                $scope.reCalcAll()
                            });
                        },

                        scrollTabIntoView: function(arg) {
                            $timeout(function() {
                                $scope.scrollTabIntoView(arg)
                            });
                        }
                    };

                    $scope.scrollTo = function(element, change, duration, callback, isLinear) {
                        var start = element.scrollLeft;
                        var increment = 20;
                        var position = 0;

                        var animateScroll = function(elapsedTime) {
                            elapsedTime += increment;
                            if (isLinear === true) {
                                position = $scope.linearTween(elapsedTime, start, change, duration);
                            } else {
                                position = $scope.easeInOutQuad(elapsedTime, start, change, duration);
                            }
                            element.scrollLeft = position;
                            if (elapsedTime < duration) {
                                setTimeout(function() {
                                    animateScroll(elapsedTime);
                                }, increment);
                            } else {
                                callback();
                            }
                        };

                        animateScroll(0);
                    }

                    $scope.linearTween = function(currentTime, start, change, duration) {
                        return change * currentTime / duration + start;
                    };

                    $scope.easeInOutQuad = function(currentTime, start, change, duration) {
                        currentTime /= duration / 2;
                        if (currentTime < 1) {
                            return change / 2 * currentTime * currentTime + start;
                        }
                        currentTime--;
                        return -change / 2 * (currentTime * (currentTime - 2) - 1) + start;
                    }

                    $scope.onWindowResize = function() {
                        // delay for a bit to avoid running lots of times.
                        clearTimeout($scope.winResizeTimeout);
                        $scope.winResizeTimeout = setTimeout(function() {
                            $scope.reCalcAll();
                            $scope.scrollTabIntoView();
                            $scope.$apply();
                        }, 250);
                    };

                    $scope.cancelMouseDownInterval = function() {
                        $scope.isHolding = false;

                        if ($scope.mouseDownInterval) {
                            $interval.cancel($scope.mouseDownInterval);
                            $scope.mouseDownInterval = null;
                        }
                    };

                    $scope.scrollButtonDown = function(direction, event) {
                        event.stopPropagation();
                        $scope.isHolding = true;

                        var realScroll = direction === 'left' ? 0 - $scope.scrollByPixels : $scope.scrollByPixels;
                        $scope.scrollTo($scope.tabContainer, realScroll, 150, function() {
                            $timeout(function() {
                                $scope.reCalcSides();
                            });
                        }, true);

                        $scope.mouseDownInterval = $interval(function() {

                            if ($scope.isHolding) {
                                $scope.scrollTo($scope.tabContainer, realScroll, 150, function() {
                                    $timeout(function() {
                                        $scope.reCalcSides();
                                    });
                                }, true);

                                if (event.target.disabled) {
                                    $scope.cancelMouseDownInterval();
                                }
                            }
                        }, 100);
                    }

                    $scope.scrollButtonUp = function() {
                        $scope.cancelMouseDownInterval();
                    }

                    $scope.activateTab = function(tab) {
                        if (tab.disabled) return;
                        tab.select();
                        $timeout(function() {
                            $scope.scrollTabIntoView();
                        });
                    }

                    $scope.reCalcSides = function() {
                        if (!$scope.tabContainer || $scope.hideButtons) return;
                        $scope.disableRight = $scope.tabContainer.scrollLeft >= $scope.tabContainer.scrollWidth - $scope.tabContainer.offsetWidth;
                        $scope.disableLeft = $scope.tabContainer.scrollLeft <= 0;

                        if ($scope.userShowTooltips) {
                            $scope.reCalcTooltips();
                        }
                    };

                    $scope.reCalcTooltips = function() {
                        if (!$scope.tabContainer || $scope.hideButtons) return;
                        var rightTooltips = [];
                        var leftTooltips = [];

                        var allTabs = $scope.tabContainer.querySelectorAll('ul.nav-pills > li, ul.nav-tabs > li');
                        angular.forEach(allTabs, function(tab) {

                            var rightPosition = parseInt(tab.getBoundingClientRect().left + tab.getBoundingClientRect().width - $scope.tabContainer.getBoundingClientRect().left);
                            var leftPosition = tab.getBoundingClientRect().left - $scope.tabContainer.getBoundingClientRect().left;
                            var heading = tab.getAttribute("data-tabScrollHeading");
                            var ignore = tab.getAttribute("data-tabScrollIgnore");

                            if (rightPosition > $scope.tabContainer.offsetWidth && !ignore && $(tab).is(':visible')) {
                                if (heading) {
                                    rightTooltips.push(heading);
								} else if (tab.title) {
                                    rightTooltips.push(tab.title);
                                } else if (tab.textContent) rightTooltips.push(tabContentAsHTML(tab.textContent, angular.element(tab).find('.mandatory').length > 0));
                            }

                            if (leftPosition < 0 && !ignore && $(tab).is(':visible')) {
                                if (heading) {
                                    leftTooltips.push(heading);
								} else if (tab.title) {
                                    leftTooltips.push(tab.title);
                                } else if (tab.textContent) leftTooltips.push(tabContentAsHTML(tab.textContent, angular.element(tab).find('.mandatory').length > 0));
                            }

                        });

                        var rightTooltipsHtml = rightTooltips.join('<br>');
                        $scope.tooltipRightHtml = $sce.trustAsHtml(rightTooltipsHtml);

                        var leftTooltipsHtml = leftTooltips.join('<br>');
                        $scope.tooltipLeftHtml = $sce.trustAsHtml(leftTooltipsHtml);
                    };

                    $scope.scrollTabIntoView = function(arg) {
                        if (!$scope.tabContainer || $scope.hideButtons) return;

                        var argInt = parseInt(arg);
                        var tabToScroll;

                        // first we find the tab element.
                        if (argInt) { // scroll tab index into view
                            var allTabs = $scope.tabContainer.querySelectorAll('ul.nav-pills > li, ul.nav-tabs > li');
                            if (allTabs.length > argInt) { // only if its really exist
                                tabToScroll = allTabs[argInt];
                            }
                        } else { // scroll selected tab into view
                            var activeTab = $scope.tabContainer.querySelector('li.active');
                            if (activeTab) {
                                tabToScroll = activeTab;
                            }
                        }

                        // now let's scroll it into view.
                        if (tabToScroll) {
                            var rightPosition = parseInt(tabToScroll.getBoundingClientRect().left + tabToScroll.getBoundingClientRect().width - $scope.tabContainer.getBoundingClientRect().left);
                            var leftPosition = tabToScroll.getBoundingClientRect().left - $scope.tabContainer.getBoundingClientRect().left;
                            if (leftPosition - $scope.leftScrollAdditionPixels < 0) {
                                var dif = leftPosition - 20 - $scope.leftScrollAdditionPixels;
                                $scope.scrollTo($scope.tabContainer, dif, 700, function() {
                                    $timeout(function() {
                                        $scope.reCalcSides();
                                    });
                                });
                            } else if (rightPosition > $scope.tabContainer.offsetWidth) {
                                var dif = rightPosition - $scope.tabContainer.offsetWidth + 20;
                                $scope.scrollTo($scope.tabContainer, dif, 700, function() {
                                    $timeout(function() {
                                        $scope.reCalcSides();
                                    });
                                });
                            }
                        }
                    };

                    // init is called only once!
                    $scope.init = function() {
                        $scope.tabContainer = $el[0].querySelector('.spacer ul.nav-pills, ul.nav-tabs');
                        if (!$scope.tabContainer) return;

                        var autoRecalc = $scope.autoRecalculate ? $scope.autoRecalculate === 'true' : scrollableTabsetConfigV2.autoRecalculate;
                        if (autoRecalc) {
                            var tabsetElement = angular.element($el[0].querySelector('.spacer div'));
                            $scope.$watchCollection(
                                function() {
                                    return tabsetElement.isolateScope() ? tabsetElement.isolateScope().tabs : false;
                                },
                                function() {
                                    $timeout(function() {
                                        $scope.reCalcAll()
                                    });
                                }
                            );
                        }

                        $scope.reCalcAll();

                        // attaching event to window resize.
                        angular.element($window).on('resize', $scope.onWindowResize);
                    };

                    // re-calculate if the scroll buttons are needed, than call re-calculate for both buttons.
                    $scope.reCalcAll = function() {
                        if (!$scope.tabContainer) return;

                        $scope.hideButtons = $scope.tabContainer.scrollWidth <= $scope.tabContainer.offsetWidth + ($scope.tabContainer.scrollHeight > angular.element($scope.tabContainer).height() ? 18 : 0);
                        $scope.hideDropDown = $scope.userShowDropDown ? $scope.hideButtons : true;
                        $scope.isButtonsVisible = !$scope.hideButtons;

                        if (!$scope.hideButtons) {

                            if (!$scope.hideDropDown) {
                                var allTabs = $scope.tabContainer.querySelectorAll('ul.nav-pills > li, ul.nav-tabs > li');
                                $scope.dropdownTabs = [];
                                angular.forEach(allTabs, function(tab) {
                                    var ignore = tab.getAttribute("data-tabScrollIgnore");
                                    if (!ignore && $(tab).is(':visible')) {
                                        var heading = tab.getAttribute("data-tabScrollHeading");
                                        var title = tab.title;
                                        var tabScope = angular.element(tab).isolateScope();
                                        //push new field to use as title in the drop down.
                                        tabScope.tabScrollTitle = heading ? heading : title ? title : tabContentAsHTML(tab.textContent, angular.element(tab).find('.mandatory').length > 0);
                                        $scope.dropdownTabs.push(tabScope);
                                    }
                                });
                            } else {
                                $scope.dropdownTabs = [];
                            }

                            $scope.reCalcSides();
                        } else {
                            $scope.dropdownTabs = [];
                        }
                    };

                    // this is how we init for the first time.
                    $timeout(function() {
                        $scope.init();
                    });

                    // when scope destroyed
                    $scope.$on('$destroy', function() {
                        angular.element($window).off('resize', $scope.onWindowResize);
                        $scope.dropdownTabs = [];
                    });
                    function tabContentAsHTML(content, hasMandatory) {
                        var title = content.trim().split(/\r?\n/).map(function(itm, idx) { if (idx > 0 && !isNaN(parseInt(itm))) return "<span class='label label-as-badge label-primary'>" + itm.trim() + "</span>"; else return itm;}).join("&nbsp;&nbsp;&nbsp;&nbsp;");
						if (hasMandatory) title += "<span class='fa fa-asterisk mandatory' style='text-shadow: 0px 0px 8px white; padding-left: 0.25em;'></span>";
						return $sce.trustAsHtml(title);
                    } 
                    $scope.dropdownClick = function(evt) {
						var tabs = $(evt.target).closest('.ui-tabs-scrollable');
						var menu = $(evt.target).closest('.dropdown');
						$(menu).removeClass('dropup');
						var $ul = $(menu).find('.dropdown-menu');
						if (tabs.offset().top - tabs.closest('.panel, .panel-body, .sp-row-content, main, body').offset().top < $ul.outerHeight()) return;
						var bottom = $(tabs).offset().top + $ul.outerHeight() + 60;
						var windowDown = $(window).scrollTop() + $(window).height() - bottom;
						// switch to dropup only if there is no space at the bottom
						if (windowDown < 0) $(menu).addClass('dropup');
                    };
                }
            };
        }
    ]);]]></script>
        <script_name/>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-01-21 20:41:27</sys_created_on>
        <sys_id>241f93732f8501101b6051072799b612</sys_id>
        <sys_mod_count>132</sys_mod_count>
        <sys_name>ui.tab.scroll.v2</sys_name>
        <sys_package display_value="Tabbed Form v2" source="bca11b732f0501101b6051072799b6cc">bca11b732f0501101b6051072799b6cc</sys_package>
        <sys_policy/>
        <sys_scope display_value="Tabbed Form v2">bca11b732f0501101b6051072799b6cc</sys_scope>
        <sys_update_name>sys_ui_script_241f93732f8501101b6051072799b612</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-09-14 11:27:41</sys_updated_on>
        <ui_type>10</ui_type>
        <use_scoped_format>false</use_scoped_format>
    </sys_ui_script>
</record_update>
